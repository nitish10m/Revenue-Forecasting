# -*- coding: utf-8 -*-
"""Prophet2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RSkp-ocUyfMjPHh8oZjBWIpl7ZzCsxAm
"""

# This implementation is based on the Prophet library

# The Prophet library is an open-source library designed for making forecasts for univariate time series datasets.
# It is easy to use and designed to automatically find # a good set of hyperparameters for the model to make skillful 
# forecasts for data with trends and seasonal structure by default.

#Advantages of using Prophet
#•	Accommodates seasonality with multiple periods
#•	Prophet is resilient to missing values
#•	Best way to handle outliers in Prophet is to remove them 
#•	Fitting of the model is fast 
#•	Intuitive hyper parameters which are easy to tune

# evaluate prophet time series forecasting model on hold out dataset
from pandas import read_csv
from pandas import to_datetime
from pandas import DataFrame
from fbprophet import Prophet
from sklearn.metrics import mean_absolute_error
from matplotlib import pyplot
# check prophet version
import fbprophet

import pandas as pd
import numpy as np

df_rev = pd.read_csv("/content/drive/My Drive/Revenue Forecast Project/Data/Revenue_original.csv")

# Create Report date from raw data

conditions =[(df_rev['Quarter'].str.split(' ').str[1] =="Q1"),\
             (df_rev['Quarter'].str.split(' ').str[1] =="Q2"),\
             (df_rev['Quarter'].str.split(' ').str[1] =="Q3"),\
             (df_rev['Quarter'].str.split(' ').str[1] =="Q4")\
            ]

choices =[("31-03-" + df_rev['Quarter'].str.split(' ').str[0]),\
          ("30-06-" + df_rev['Quarter'].str.split(' ').str[0]),\
          ("30-09-" + df_rev['Quarter'].str.split(' ').str[0]),\
          ("31-12-" + df_rev['Quarter'].str.split(' ').str[0])\
         ]


#df_rev['ReportDate'] = np.select(conditions, choices, default="NA")

df_rev['ReportDate'] = np.select(conditions, choices)
df_rev.head()

#Convert Revernue to float type
df_rev['Revenue'] = df_rev['Revenue'].str.replace(',','')
df_rev['Revenue'] = df_rev['Revenue'].astype('float')

# Convert ReportDate to date type

df_rev['ReportDate'] = pd.to_datetime(df_rev['ReportDate'])
# remove unwanted column
df_rev.drop(['Quarter'], axis=1, inplace=True)

# sort the dataframe in acceding 
df_rev = df_rev.sort_values(['ReportDate'], ascending=[True])

# set column ReportDate as index of dataframe
#df_rev.set_index('ReportDate', inplace=True)
#df_rev.set_index('ReportDate')

# set column 'ReportDate' as Index of dataframe 
df_rev.head(5)

df_rev.dtypes

new_column = ['ReportDate','Revenue']
df_rev = df_rev[new_column]
df_rev.head()

#Renaming the columns as desired by Prophet. The Fbprophet library assumes a univariate analysis with respect
# to the time variable and therefore we need not specify other columns in it. 
# So, now let’s rename the columns to ds and y as desired by the library.

df_rev.columns = ["ds","y"]

df_rev.head()

df_rev['ds'] = pd.to_datetime(df_rev.ds)
df_rev.head()

df_rev.dtypes

model = Prophet()
model.fit(df_rev)

model

future = model.make_future_dataframe(periods=5,freq='Q')

future.tail()

pred = model.predict(future)
pred

pred.tail()

# From above predictions table, we are only concerned with ds, yhat_lower, yhat_upper, and yhat
# because these are the variables that will give us the predicted results with respect to the date specified.

# yhat means the predicted output based on the input fed to the model, yhat_lower, and upper means the upper and lower value 
# that can go based on the predicted output that is, the fluctuations that can happen.

pred[['ds','yhat','yhat_lower','yhat_upper']].tail()

#Plotting the output:

abc = model.plot(pred)

# The plot we can see the predictions made by the Prophet library. 
# The dotted lines represent the actual data points that we specified in the training part. 
# The lines represent the predictions made. Also, we can see the predictions made on the unseen data
# that we created with only lines at the extreme right-hand side.

#Checking the trends in the data:

xyz = model.plot_components(pred)

# Above, we can see the trends with respect to monthly, weekly and Daily of the year. 
# The first graph represents an increasing trend as we progress in the months and 
# The 2nd graph shows a fluctuating trend in the weekly data. For some days it is low while for some it is high.
# The 3rd graph also shows a fluctuating hourly trend